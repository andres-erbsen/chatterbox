package images

import (
	"fmt"
	"reflect"
	"strings"
	"unsafe"
)

func bindata_read(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}

var _blurry_png = "\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xde\x0c\x0f\x0a\x1c\x0e\x75\x2b\xdf\x24\x00\x00\x00\x1d\x69\x54\x58\x74\x43\x6f\x6d\x6d\x65\x6e\x74\x00\x00\x00\x00\x00\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\x64\x2e\x65\x07\x00\x00\x01\x23\x49\x44\x41\x54\x38\xcb\xa5\x93\xdd\x4a\xc3\x40\x10\x85\xbf\x6d\x37\x25\x56\xb1\x9a\x50\x6d\x41\x2f\x04\x7d\xff\x77\xaa\x60\x22\x31\xad\x09\xbd\x08\xa9\x3a\xde\x9c\xc8\x34\xa0\x08\xdd\x9b\x19\x76\xf6\x9c\x39\x3b\x3f\xc1\xcc\xf0\x27\x84\xb0\x92\xbb\xe4\xf8\x54\x00\x66\x56\xfa\xcb\xf8\x0b\x30\x07\xb2\x11\x41\x0e\xd4\x21\x04\x3c\x51\x74\x60\x0f\x5c\x00\x97\xb2\x00\x8d\xfc\xcc\x13\x99\x59\x19\x47\x19\x32\xe0\x1e\x58\x03\xb7\x40\xaa\x58\x07\xbc\x02\xc5\xf8\x4b\xd1\x65\x1f\xc0\x4f\x22\xb8\x06\x66\x7a\xdc\x4b\xd1\x85\x23\x58\x86\x10\x7e\x6a\x90\x4b\xe2\xda\x65\xbf\x72\x35\xfa\x70\x64\x7b\xa0\x15\xa6\x9a\x02\x0f\xc0\x1d\x70\x03\x3c\x02\x2b\x05\x67\xc0\x19\x90\x00\x26\xfb\x25\xb2\x1d\x70\x00\xba\x89\x93\xb4\xd0\x9f\x67\xca\x9c\x0a\x94\xc8\x8f\x8a\xa5\xae\xb8\x4c\x38\xf1\xf8\x2e\x34\xaa\x76\x2f\x99\x9d\x8b\x75\xba\xeb\xe5\x37\x43\x60\x2a\x15\xe7\xc0\x5c\xf2\xe6\x22\x4e\x80\x4f\xfd\xf5\x00\xbc\x03\x6f\xc0\x06\x78\x51\x4b\x37\x83\x82\x5a\x6d\x2c\x5c\xab\xfa\x51\x1b\x77\x8a\x17\x52\x50\x03\x44\x33\x2b\x35\x9e\xb9\x93\xbc\xff\x63\x90\x9e\x81\x2d\x50\x8d\x27\xb1\x76\x7e\xab\xc7\x7e\x94\x5b\xd9\xad\x7f\x1b\x86\x6d\xfc\xc7\x32\x0d\xc0\xa3\xad\x0c\xa7\xae\xf3\x37\x6b\xb5\x68\x07\x76\xf5\xad\x00\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82"

func blurry_png() ([]byte, error) {
	return bindata_read(
		_blurry_png,
		"blurry.png",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"blurry.png": blurry_png,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
func AssetDir(name string) ([]string, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	pathList := strings.Split(cannonicalName, "/")
	node := _bintree
	for _, p := range pathList {
		node = node.Children[p]
		if node == nil {
			return nil, fmt.Errorf("Asset %s not found", name)
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"blurry.png": &_bintree_t{blurry_png, map[string]*_bintree_t{
	}},
}}
