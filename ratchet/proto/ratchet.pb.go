// Code generated by protoc-gen-gogo.
// source: ratchet.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		ratchet.proto

	It has these top-level messages:
		RatchetState
*/
package proto

import proto1 "code.google.com/p/gogoprotobuf/proto"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

import github_com_andres_erbsen_chatterbox_proto "github.com/andres-erbsen/chatterbox/proto"

import io "io"
import fmt "fmt"
import code_google_com_p_gogoprotobuf_proto "code.google.com/p/gogoprotobuf/proto"

import code_google_com_p_gogoprotobuf_proto1 "code.google.com/p/gogoprotobuf/proto"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = math.Inf

type RatchetState struct {
	// Diffie-Hellman ratchet clicks once per round trip and provides security
	// against comrpomises of old ratchet states.
	RootKey            *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,1,req,name=root_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"root_key,omitempty"`
	OurRatchetPrivate  *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,2,req,name=our_ratchet_private,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"our_ratchet_private,omitempty"`
	TheirRatchetPublic *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,3,req,name=their_ratchet_public,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"their_ratchet_public,omitempty"`
	// Update the DH ratchet on next send?
	Ratchet bool `protobuf:"varint,4,req,name=ratchet" json:"ratchet"`
	// Header keys are synced to the Diffie-Hellman ratchet
	SendHeaderKey     *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,5,req,name=send_header_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"send_header_key,omitempty"`
	RecvHeaderKey     *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,6,req,name=recv_header_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"recv_header_key,omitempty"`
	NextSendHeaderKey *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,7,req,name=next_send_header_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"next_send_header_key,omitempty"`
	NextRecvHeaderKey *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,8,req,name=next_recv_header_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"next_recv_header_key,omitempty"`
	// The sending and receiving hash ratchets are seeded using the DH-ratchet
	// and click right after each time a message is sent or received to provide
	// immediate forward secrecy.
	SendChainKey *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,9,req,name=send_chain_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"send_chain_key,omitempty"`
	RecvChainKey *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,10,req,name=recv_chain_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"recv_chain_key,omitempty"`
	// Number of messages under the current and the previous header keys, the
	// send_count variables are sent in headers to enable detection of dropped
	// or out-of-order messages.
	SendCount     uint32 `protobuf:"varint,11,req,name=send_count" json:"send_count"`
	RecvCount     uint32 `protobuf:"varint,12,req,name=recv_count" json:"recv_count"`
	PrevSendCount uint32 `protobuf:"varint,13,req,name=prev_send_count" json:"prev_send_count"`
	// Auth keys are updated together with Diffie-Hellman ratchet keys, but
	// they are kept around longer. Public-key authenticators between the
	// sender's long-term key and the receiver's current auth key can be used
	// to authenticate messages.
	PrevAuthPrivate  *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,14,req,name=prev_auth_private,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"prev_auth_private,omitempty"`
	OurAuthPrivate   *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,15,req,name=our_auth_private,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"our_auth_private,omitempty"`
	TheirAuthPublic  *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,16,req,name=their_auth_public,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"their_auth_public,omitempty"`
	SavedKeys        []RatchetState_SavedKeys                          `protobuf:"bytes,17,rep,name=saved_keys" json:"saved_keys"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *RatchetState) Reset()         { *m = RatchetState{} }
func (m *RatchetState) String() string { return proto1.CompactTextString(m) }
func (*RatchetState) ProtoMessage()    {}

type RatchetState_SavedKeys struct {
	HeaderKey        *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,1,req,name=header_key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"header_key,omitempty"`
	AuthPrivate      *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,2,req,name=auth_private,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"auth_private,omitempty"`
	MessageKeys      []RatchetState_SavedKeys_MessageKey               `protobuf:"bytes,3,rep,name=message_keys" json:"message_keys"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *RatchetState_SavedKeys) Reset()         { *m = RatchetState_SavedKeys{} }
func (m *RatchetState_SavedKeys) String() string { return proto1.CompactTextString(m) }
func (*RatchetState_SavedKeys) ProtoMessage()    {}

type RatchetState_SavedKeys_MessageKey struct {
	Num              uint32                                            `protobuf:"varint,1,req,name=num" json:"num"`
	Key              *github_com_andres_erbsen_chatterbox_proto.Byte32 `protobuf:"bytes,2,req,name=key,customtype=github.com/andres-erbsen/chatterbox/proto.Byte32" json:"key,omitempty"`
	CreationTime     int64                                             `protobuf:"varint,3,req,name=creation_time" json:"creation_time"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *RatchetState_SavedKeys_MessageKey) Reset()         { *m = RatchetState_SavedKeys_MessageKey{} }
func (m *RatchetState_SavedKeys_MessageKey) String() string { return proto1.CompactTextString(m) }
func (*RatchetState_SavedKeys_MessageKey) ProtoMessage()    {}

func init() {
}
func (m *RatchetState) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.RootKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OurRatchetPrivate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OurRatchetPrivate = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.OurRatchetPrivate.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheirRatchetPublic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TheirRatchetPublic = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.TheirRatchetPublic.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratchet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ratchet = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendHeaderKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendHeaderKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.SendHeaderKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvHeaderKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvHeaderKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.RecvHeaderKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSendHeaderKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextSendHeaderKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.NextSendHeaderKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRecvHeaderKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextRecvHeaderKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.NextRecvHeaderKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendChainKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendChainKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.SendChainKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvChainKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvChainKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.RecvChainKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendCount", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.SendCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvCount", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.RecvCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevSendCount", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.PrevSendCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevAuthPrivate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevAuthPrivate = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.PrevAuthPrivate.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OurAuthPrivate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OurAuthPrivate = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.OurAuthPrivate.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TheirAuthPublic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TheirAuthPublic = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.TheirAuthPublic.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedKeys = append(m.SavedKeys, RatchetState_SavedKeys{})
			m.SavedKeys[len(m.SavedKeys)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RatchetState_SavedKeys) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderKey = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.HeaderKey.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthPrivate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthPrivate = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.AuthPrivate.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageKeys = append(m.MessageKeys, RatchetState_SavedKeys_MessageKey{})
			m.MessageKeys[len(m.MessageKeys)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RatchetState_SavedKeys_MessageKey) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = &github_com_andres_erbsen_chatterbox_proto.Byte32{}
			if err := m.Key.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				m.CreationTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RatchetState) Size() (n int) {
	var l int
	_ = l
	if m.RootKey != nil {
		l = m.RootKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.OurRatchetPrivate != nil {
		l = m.OurRatchetPrivate.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.TheirRatchetPublic != nil {
		l = m.TheirRatchetPublic.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	n += 2
	if m.SendHeaderKey != nil {
		l = m.SendHeaderKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.RecvHeaderKey != nil {
		l = m.RecvHeaderKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.NextSendHeaderKey != nil {
		l = m.NextSendHeaderKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.NextRecvHeaderKey != nil {
		l = m.NextRecvHeaderKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.SendChainKey != nil {
		l = m.SendChainKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.RecvChainKey != nil {
		l = m.RecvChainKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	n += 1 + sovRatchet(uint64(m.SendCount))
	n += 1 + sovRatchet(uint64(m.RecvCount))
	n += 1 + sovRatchet(uint64(m.PrevSendCount))
	if m.PrevAuthPrivate != nil {
		l = m.PrevAuthPrivate.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.OurAuthPrivate != nil {
		l = m.OurAuthPrivate.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.TheirAuthPublic != nil {
		l = m.TheirAuthPublic.Size()
		n += 2 + l + sovRatchet(uint64(l))
	}
	if len(m.SavedKeys) > 0 {
		for _, e := range m.SavedKeys {
			l = e.Size()
			n += 2 + l + sovRatchet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *RatchetState_SavedKeys) Size() (n int) {
	var l int
	_ = l
	if m.HeaderKey != nil {
		l = m.HeaderKey.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if m.AuthPrivate != nil {
		l = m.AuthPrivate.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	if len(m.MessageKeys) > 0 {
		for _, e := range m.MessageKeys {
			l = e.Size()
			n += 1 + l + sovRatchet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *RatchetState_SavedKeys_MessageKey) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRatchet(uint64(m.Num))
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovRatchet(uint64(l))
	}
	n += 1 + sovRatchet(uint64(m.CreationTime))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRatchet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRatchet(x uint64) (n int) {
	return sovRatchet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedRatchetState(r randyRatchet, easy bool) *RatchetState {
	this := &RatchetState{}
	this.RootKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.OurRatchetPrivate = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.TheirRatchetPublic = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.Ratchet = bool(r.Intn(2) == 0)
	this.SendHeaderKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.RecvHeaderKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.NextSendHeaderKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.NextRecvHeaderKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.SendChainKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.RecvChainKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.SendCount = r.Uint32()
	this.RecvCount = r.Uint32()
	this.PrevSendCount = r.Uint32()
	this.PrevAuthPrivate = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.OurAuthPrivate = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.TheirAuthPublic = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.SavedKeys = make([]RatchetState_SavedKeys, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedRatchetState_SavedKeys(r, easy)
			this.SavedKeys[i] = *v2
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRatchet(r, 18)
	}
	return this
}

func NewPopulatedRatchetState_SavedKeys(r randyRatchet, easy bool) *RatchetState_SavedKeys {
	this := &RatchetState_SavedKeys{}
	this.HeaderKey = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.AuthPrivate = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.MessageKeys = make([]RatchetState_SavedKeys_MessageKey, v3)
		for i := 0; i < v3; i++ {
			v4 := NewPopulatedRatchetState_SavedKeys_MessageKey(r, easy)
			this.MessageKeys[i] = *v4
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRatchet(r, 4)
	}
	return this
}

func NewPopulatedRatchetState_SavedKeys_MessageKey(r randyRatchet, easy bool) *RatchetState_SavedKeys_MessageKey {
	this := &RatchetState_SavedKeys_MessageKey{}
	this.Num = r.Uint32()
	this.Key = github_com_andres_erbsen_chatterbox_proto.NewPopulatedByte32(r)
	this.CreationTime = r.Int63()
	if r.Intn(2) == 0 {
		this.CreationTime *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedRatchet(r, 4)
	}
	return this
}

type randyRatchet interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRatchet(r randyRatchet) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringRatchet(r randyRatchet) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneRatchet(r)
	}
	return string(tmps)
}
func randUnrecognizedRatchet(r randyRatchet, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldRatchet(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldRatchet(data []byte, r randyRatchet, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateRatchet(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateRatchet(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateRatchet(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateRatchet(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateRatchet(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateRatchet(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateRatchet(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *RatchetState) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RatchetState) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RootKey != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRatchet(data, i, uint64(m.RootKey.Size()))
		n1, err := m.RootKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.OurRatchetPrivate != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRatchet(data, i, uint64(m.OurRatchetPrivate.Size()))
		n2, err := m.OurRatchetPrivate.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TheirRatchetPublic != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintRatchet(data, i, uint64(m.TheirRatchetPublic.Size()))
		n3, err := m.TheirRatchetPublic.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	data[i] = 0x20
	i++
	if m.Ratchet {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	if m.SendHeaderKey != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintRatchet(data, i, uint64(m.SendHeaderKey.Size()))
		n4, err := m.SendHeaderKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.RecvHeaderKey != nil {
		data[i] = 0x32
		i++
		i = encodeVarintRatchet(data, i, uint64(m.RecvHeaderKey.Size()))
		n5, err := m.RecvHeaderKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.NextSendHeaderKey != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintRatchet(data, i, uint64(m.NextSendHeaderKey.Size()))
		n6, err := m.NextSendHeaderKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.NextRecvHeaderKey != nil {
		data[i] = 0x42
		i++
		i = encodeVarintRatchet(data, i, uint64(m.NextRecvHeaderKey.Size()))
		n7, err := m.NextRecvHeaderKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.SendChainKey != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintRatchet(data, i, uint64(m.SendChainKey.Size()))
		n8, err := m.SendChainKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.RecvChainKey != nil {
		data[i] = 0x52
		i++
		i = encodeVarintRatchet(data, i, uint64(m.RecvChainKey.Size()))
		n9, err := m.RecvChainKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	data[i] = 0x58
	i++
	i = encodeVarintRatchet(data, i, uint64(m.SendCount))
	data[i] = 0x60
	i++
	i = encodeVarintRatchet(data, i, uint64(m.RecvCount))
	data[i] = 0x68
	i++
	i = encodeVarintRatchet(data, i, uint64(m.PrevSendCount))
	if m.PrevAuthPrivate != nil {
		data[i] = 0x72
		i++
		i = encodeVarintRatchet(data, i, uint64(m.PrevAuthPrivate.Size()))
		n10, err := m.PrevAuthPrivate.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.OurAuthPrivate != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintRatchet(data, i, uint64(m.OurAuthPrivate.Size()))
		n11, err := m.OurAuthPrivate.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.TheirAuthPublic != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintRatchet(data, i, uint64(m.TheirAuthPublic.Size()))
		n12, err := m.TheirAuthPublic.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.SavedKeys) > 0 {
		for _, msg := range m.SavedKeys {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			i = encodeVarintRatchet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *RatchetState_SavedKeys) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RatchetState_SavedKeys) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeaderKey != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRatchet(data, i, uint64(m.HeaderKey.Size()))
		n13, err := m.HeaderKey.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.AuthPrivate != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRatchet(data, i, uint64(m.AuthPrivate.Size()))
		n14, err := m.AuthPrivate.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.MessageKeys) > 0 {
		for _, msg := range m.MessageKeys {
			data[i] = 0x1a
			i++
			i = encodeVarintRatchet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *RatchetState_SavedKeys_MessageKey) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RatchetState_SavedKeys_MessageKey) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintRatchet(data, i, uint64(m.Num))
	if m.Key != nil {
		data[i] = 0x12
		i++
		i = encodeVarintRatchet(data, i, uint64(m.Key.Size()))
		n15, err := m.Key.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	data[i] = 0x18
	i++
	i = encodeVarintRatchet(data, i, uint64(m.CreationTime))
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64Ratchet(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ratchet(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRatchet(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}

type RatchetStateFace interface {
	Proto() code_google_com_p_gogoprotobuf_proto1.Message
	GetRootKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetOurRatchetPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetTheirRatchetPublic() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetRatchet() bool
	GetSendHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetRecvHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetNextSendHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetNextRecvHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetSendChainKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetRecvChainKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetSendCount() uint32
	GetRecvCount() uint32
	GetPrevSendCount() uint32
	GetPrevAuthPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetOurAuthPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetTheirAuthPublic() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetSavedKeys() []RatchetState_SavedKeys
}

func (this *RatchetState) Proto() code_google_com_p_gogoprotobuf_proto1.Message {
	return this
}

func (this *RatchetState) TestProto() code_google_com_p_gogoprotobuf_proto1.Message {
	return NewRatchetStateFromFace(this)
}

func (this *RatchetState) GetRootKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.RootKey
}

func (this *RatchetState) GetOurRatchetPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.OurRatchetPrivate
}

func (this *RatchetState) GetTheirRatchetPublic() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.TheirRatchetPublic
}

func (this *RatchetState) GetRatchet() bool {
	return this.Ratchet
}

func (this *RatchetState) GetSendHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.SendHeaderKey
}

func (this *RatchetState) GetRecvHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.RecvHeaderKey
}

func (this *RatchetState) GetNextSendHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.NextSendHeaderKey
}

func (this *RatchetState) GetNextRecvHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.NextRecvHeaderKey
}

func (this *RatchetState) GetSendChainKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.SendChainKey
}

func (this *RatchetState) GetRecvChainKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.RecvChainKey
}

func (this *RatchetState) GetSendCount() uint32 {
	return this.SendCount
}

func (this *RatchetState) GetRecvCount() uint32 {
	return this.RecvCount
}

func (this *RatchetState) GetPrevSendCount() uint32 {
	return this.PrevSendCount
}

func (this *RatchetState) GetPrevAuthPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.PrevAuthPrivate
}

func (this *RatchetState) GetOurAuthPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.OurAuthPrivate
}

func (this *RatchetState) GetTheirAuthPublic() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.TheirAuthPublic
}

func (this *RatchetState) GetSavedKeys() []RatchetState_SavedKeys {
	return this.SavedKeys
}

func NewRatchetStateFromFace(that RatchetStateFace) *RatchetState {
	this := &RatchetState{}
	this.RootKey = that.GetRootKey()
	this.OurRatchetPrivate = that.GetOurRatchetPrivate()
	this.TheirRatchetPublic = that.GetTheirRatchetPublic()
	this.Ratchet = that.GetRatchet()
	this.SendHeaderKey = that.GetSendHeaderKey()
	this.RecvHeaderKey = that.GetRecvHeaderKey()
	this.NextSendHeaderKey = that.GetNextSendHeaderKey()
	this.NextRecvHeaderKey = that.GetNextRecvHeaderKey()
	this.SendChainKey = that.GetSendChainKey()
	this.RecvChainKey = that.GetRecvChainKey()
	this.SendCount = that.GetSendCount()
	this.RecvCount = that.GetRecvCount()
	this.PrevSendCount = that.GetPrevSendCount()
	this.PrevAuthPrivate = that.GetPrevAuthPrivate()
	this.OurAuthPrivate = that.GetOurAuthPrivate()
	this.TheirAuthPublic = that.GetTheirAuthPublic()
	this.SavedKeys = that.GetSavedKeys()
	return this
}

type RatchetState_SavedKeysFace interface {
	Proto() code_google_com_p_gogoprotobuf_proto1.Message
	GetHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetAuthPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetMessageKeys() []RatchetState_SavedKeys_MessageKey
}

func (this *RatchetState_SavedKeys) Proto() code_google_com_p_gogoprotobuf_proto1.Message {
	return this
}

func (this *RatchetState_SavedKeys) TestProto() code_google_com_p_gogoprotobuf_proto1.Message {
	return NewRatchetState_SavedKeysFromFace(this)
}

func (this *RatchetState_SavedKeys) GetHeaderKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.HeaderKey
}

func (this *RatchetState_SavedKeys) GetAuthPrivate() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.AuthPrivate
}

func (this *RatchetState_SavedKeys) GetMessageKeys() []RatchetState_SavedKeys_MessageKey {
	return this.MessageKeys
}

func NewRatchetState_SavedKeysFromFace(that RatchetState_SavedKeysFace) *RatchetState_SavedKeys {
	this := &RatchetState_SavedKeys{}
	this.HeaderKey = that.GetHeaderKey()
	this.AuthPrivate = that.GetAuthPrivate()
	this.MessageKeys = that.GetMessageKeys()
	return this
}

type RatchetState_SavedKeys_MessageKeyFace interface {
	Proto() code_google_com_p_gogoprotobuf_proto1.Message
	GetNum() uint32
	GetKey() *github_com_andres_erbsen_chatterbox_proto.Byte32
	GetCreationTime() int64
}

func (this *RatchetState_SavedKeys_MessageKey) Proto() code_google_com_p_gogoprotobuf_proto1.Message {
	return this
}

func (this *RatchetState_SavedKeys_MessageKey) TestProto() code_google_com_p_gogoprotobuf_proto1.Message {
	return NewRatchetState_SavedKeys_MessageKeyFromFace(this)
}

func (this *RatchetState_SavedKeys_MessageKey) GetNum() uint32 {
	return this.Num
}

func (this *RatchetState_SavedKeys_MessageKey) GetKey() *github_com_andres_erbsen_chatterbox_proto.Byte32 {
	return this.Key
}

func (this *RatchetState_SavedKeys_MessageKey) GetCreationTime() int64 {
	return this.CreationTime
}

func NewRatchetState_SavedKeys_MessageKeyFromFace(that RatchetState_SavedKeys_MessageKeyFace) *RatchetState_SavedKeys_MessageKey {
	this := &RatchetState_SavedKeys_MessageKey{}
	this.Num = that.GetNum()
	this.Key = that.GetKey()
	this.CreationTime = that.GetCreationTime()
	return this
}

func (this *RatchetState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RatchetState)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.RootKey == nil {
		if this.RootKey != nil {
			return false
		}
	} else if !this.RootKey.Equal(*that1.RootKey) {
		return false
	}
	if that1.OurRatchetPrivate == nil {
		if this.OurRatchetPrivate != nil {
			return false
		}
	} else if !this.OurRatchetPrivate.Equal(*that1.OurRatchetPrivate) {
		return false
	}
	if that1.TheirRatchetPublic == nil {
		if this.TheirRatchetPublic != nil {
			return false
		}
	} else if !this.TheirRatchetPublic.Equal(*that1.TheirRatchetPublic) {
		return false
	}
	if this.Ratchet != that1.Ratchet {
		return false
	}
	if that1.SendHeaderKey == nil {
		if this.SendHeaderKey != nil {
			return false
		}
	} else if !this.SendHeaderKey.Equal(*that1.SendHeaderKey) {
		return false
	}
	if that1.RecvHeaderKey == nil {
		if this.RecvHeaderKey != nil {
			return false
		}
	} else if !this.RecvHeaderKey.Equal(*that1.RecvHeaderKey) {
		return false
	}
	if that1.NextSendHeaderKey == nil {
		if this.NextSendHeaderKey != nil {
			return false
		}
	} else if !this.NextSendHeaderKey.Equal(*that1.NextSendHeaderKey) {
		return false
	}
	if that1.NextRecvHeaderKey == nil {
		if this.NextRecvHeaderKey != nil {
			return false
		}
	} else if !this.NextRecvHeaderKey.Equal(*that1.NextRecvHeaderKey) {
		return false
	}
	if that1.SendChainKey == nil {
		if this.SendChainKey != nil {
			return false
		}
	} else if !this.SendChainKey.Equal(*that1.SendChainKey) {
		return false
	}
	if that1.RecvChainKey == nil {
		if this.RecvChainKey != nil {
			return false
		}
	} else if !this.RecvChainKey.Equal(*that1.RecvChainKey) {
		return false
	}
	if this.SendCount != that1.SendCount {
		return false
	}
	if this.RecvCount != that1.RecvCount {
		return false
	}
	if this.PrevSendCount != that1.PrevSendCount {
		return false
	}
	if that1.PrevAuthPrivate == nil {
		if this.PrevAuthPrivate != nil {
			return false
		}
	} else if !this.PrevAuthPrivate.Equal(*that1.PrevAuthPrivate) {
		return false
	}
	if that1.OurAuthPrivate == nil {
		if this.OurAuthPrivate != nil {
			return false
		}
	} else if !this.OurAuthPrivate.Equal(*that1.OurAuthPrivate) {
		return false
	}
	if that1.TheirAuthPublic == nil {
		if this.TheirAuthPublic != nil {
			return false
		}
	} else if !this.TheirAuthPublic.Equal(*that1.TheirAuthPublic) {
		return false
	}
	if len(this.SavedKeys) != len(that1.SavedKeys) {
		return false
	}
	for i := range this.SavedKeys {
		if !this.SavedKeys[i].Equal(&that1.SavedKeys[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RatchetState_SavedKeys) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RatchetState_SavedKeys)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.HeaderKey == nil {
		if this.HeaderKey != nil {
			return false
		}
	} else if !this.HeaderKey.Equal(*that1.HeaderKey) {
		return false
	}
	if that1.AuthPrivate == nil {
		if this.AuthPrivate != nil {
			return false
		}
	} else if !this.AuthPrivate.Equal(*that1.AuthPrivate) {
		return false
	}
	if len(this.MessageKeys) != len(that1.MessageKeys) {
		return false
	}
	for i := range this.MessageKeys {
		if !this.MessageKeys[i].Equal(&that1.MessageKeys[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RatchetState_SavedKeys_MessageKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RatchetState_SavedKeys_MessageKey)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if that1.Key == nil {
		if this.Key != nil {
			return false
		}
	} else if !this.Key.Equal(*that1.Key) {
		return false
	}
	if this.CreationTime != that1.CreationTime {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
